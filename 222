#ifndef LINKED_LIST_H
#define LINKED_LIST_H

#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>

// Структура, представляющая узел списка
typedef struct list_node_t
{
    void *data;                // Указатель на данные, хранящиеся в узле
    struct list_node_t *next;  // Указатель на следующий узел в списке
} list_node_t;

// Структура, представляющая сам список
typedef struct
{
    list_node_t *head;  // Указатель на первый узел списка (голова списка)
    size_t data_size;   // Размер данных, которые будут храниться в каждом узле
} list_t;

// Функция для создания нового списка
// Принимает размер данных, которые будут храниться в списке
// Возвращает указатель на созданный список или NULL, если память не удалось выделить
list_t *list_create(size_t);

// Функция для проверки, пуст ли список
// Принимает указатель на список
// Возвращает true, если список пуст, и false в противном случае
bool list_empty(list_t *);

// Функция для проверки, содержится ли элемент в списке
// Принимает указатель на список и указатель на элемент для поиска
// Возвращает true, если элемент найден, и false в противном случае
bool list_contains(list_t *, void *);

// Функция для получения длины списка
// Принимает указатель на список
// Возвращает количество элементов в списке
size_t list_length(list_t*);

// Функция для поиска индекса элемента в списке
// Принимает указатель на список и указатель на элемент для поиска
// Возвращает индекс элемента, если он найден, или (size_t)-1, если элемент не найден
size_t list_index(list_t *, void *);

// Функция для удаления и возврата последнего элемента списка
// Принимает указатель на список
// Возвращает указатель на данные последнего элемента или NULL, если список пуст
void *list_pop(list_t *);

// Функция для добавления элемента в конец списка
// Принимает указатель на список и указатель на данные для добавления
void list_append(list_t*, void *);

// Функция для удаления элемента из списка
// Принимает указатель на список и указатель на данные для удаления
void list_remove(list_t *, void *);

// Функция для вставки элемента в список по указанному индексу
// Принимает указатель на список, индекс для вставки и указатель на данные для вставки
void list_insert(list_t *, size_t, void *);

// Функция для уничтожения списка
// Принимает указатель на список
// Освобождает всю память, выделенную для списка и его узлов
void list_destroy(list_t *);

// Функция для печати списка целых чисел в файл
// Принимает указатель на список и указатель на файл, в который будет производиться вывод
void list_print_int(list_t *, FILE *);

#endif
