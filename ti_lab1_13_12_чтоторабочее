using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.IO;
using System.Linq;
using System.Reflection.Emit;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Xml.Linq;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.ToolTip;

namespace WindowsFormsApp1
{
    public partial class Form1 : Form
    {
        private DataTable dataTable;
        private DataTable dataTableA;
        private DataTable dataTableB;
        public Form1()
        {
            InitializeComponent();
            label3.Visible = false;
            label4.Visible = false;
            dataGridView1.Visible = false;
            dataGridView2.Visible = false;
            dataGridView3.Visible = false;
            comboBox1.DropDownStyle = ComboBoxStyle.DropDownList;

        }
        private void button1_Click(object sender, EventArgs e)
        {
            double n;
            double m;

            if (double.TryParse(textBox1.Text, out m) & double.TryParse(textBox2.Text, out n))
            {
                if (n > 0 & m > 0)
                {
                    if (comboBox1.Text == "1" || comboBox1.Text == "2" || comboBox1.Text == "3")
                    {
                        comboBox1.Visible = false;
                        dataGridView1.ReadOnly = false;// Разрешаем редактирование ячеек в DataGridView
                        dataGridView1.AllowUserToAddRows = false;// Запрещаем добавлять строки в DataGridView
                        //  Скрываем поля ввода i и j и кнопку создания таблиц
                        textBox1.Visible = false;
                        textBox2.Visible = false;
                        label6.Visible = false;
                        label1.Visible = false;
                        label2.Visible = false;
                        button1.Visible = false;
                        // Показываем таблицы и кнопку решения задачи 
                        label3.Visible = true;
                        label4.Visible = true;
                        dataGridView1.Visible = true;
                        dataTable = new DataTable();

                        for (int i = 0; i < n; i++)
                        {
                            dataTable.Columns.Add($"{i + 1}", typeof(double));
                        }

                        dataGridView1.DataSource = dataTable;

                        for (int i = 0; i < m; i++)
                        {
                            DataRow newRow = dataTable.NewRow();
                            dataTable.Rows.Add(newRow);
                        }

                        if (comboBox1.Text == "1" || comboBox1.Text == "2")// отображение элементов интерфейса для 1 способа
                        {
                            dataGridView2.Visible = true;
                            dataGridView2.ReadOnly = false;
                            dataGridView2.AllowUserToAddRows = false;
                            dataGridView2.Visible = true;
                            dataTableA = new DataTable();
                            label3.Text = "p(bj / ai)";
                            if (comboBox1.Text == "1")
                            {
                                label4.Text = "A";
                                for (int i = 0; i < m; i++)
                                {
                                    dataTableA.Columns.Add($"{i + 1}", typeof(double));
                                }
                            }
                            else
                            {
                                label4.Text = "B";
                                label3.Text = "p(ai / bj)";
                                for (int i = 0; i < n; i++)
                                {
                                    dataTableA.Columns.Add($"{i + 1}", typeof(double));
                                }
                            }
                            dataGridView2.DataSource = dataTableA;
                            DataRow newRowA = dataTableA.NewRow();
                            dataTableA.Rows.Add(newRowA);
                        }
                        //else if (comboBox1.Text == "2")
                        //{
                        //    label3.Text = "p(ai / bj)";
                        //    label4.Text = "B";
                        //    dataGridView2.Visible = true;
                        //    dataGridView2.ReadOnly = false;
                        //    dataGridView2.AllowUserToAddRows = false;
                        //    dataGridView2.Visible = true;
                        //    //dataGridView1.Visible = true;
                        //    //dataGridView3.ReadOnly = false;
                        //    //dataGridView3.AllowUserToAddRows = false;
                        //    //dataGridView3.Visible = true;

                        //    dataTableB = new DataTable();
                        //    for (int i = 0; i < n; i++)
                        //    {
                        //        dataTableB.Columns.Add($"{i + 1}", typeof(double));
                        //    }
                        //    dataGridView3.DataSource = dataTableB;
                        //    DataRow newRowB = dataTableB.NewRow();
                        //    dataTableB.Rows.Add(newRowB);
                        //}
                        else
                        {
                            label3.Text = "p(ai, bj)";
                            label4.Visible = false;
                        }
                    }
                    else
                    {
                        MessageBox.Show("Выберите способ решения", "Ошибка");
                    }
                }
                else
                {
                    MessageBox.Show("Введите положительное цело число", "Ошибка");
                }
            }
            else
            {
                MessageBox.Show("Введите цело число", "Ошибка");
            }
        }

 

        private double[,] ReadMatrixFromDataGrid(DataGridView dataGridView, int n, int m)
        {
            double[,] matrix = new double[n, m];
            for (int i = 0; i < n; i++)
            {
                for (int j = 0; j < m; j++)
                {
                    if (!string.IsNullOrEmpty(dataGridView.Rows[i].Cells[j].Value?.ToString()))
                    {
                        matrix[i, j] = Convert.ToDouble(dataGridView.Rows[i].Cells[j].Value);
                        //MessageBox.Show(matrix[i, j].ToString(), "эл. матрицы ");
                    }
                    else
                    {
                        matrix[i, j] = 0;
                    }
                }
            }
            return matrix;
        }

        private double[,] MultiplyMatricesB(double[,] matrix1, double[,] matrix2)
        {
            int rows1 = matrix1.GetLength(0);
            int cols1 = matrix1.GetLength(1);
            int rows2 = matrix2.GetLength(0);
            int cols2 = matrix2.GetLength(1);

            if (cols1 != rows2)
            {
                throw new ArgumentException("Количество столбцов первой матрицы должно быть равно количеству строк второй матрицы.");
            }

            double[,] resultMatrix = new double[rows1, cols2];

            for (int i = 0; i < rows1; i++) // Строки результирующей матрицы
            {
                for (int j = 0; j < cols2; j++) // Столбцы результирующей матрицы
                {
                    for (int k = 0; k < cols1; k++) // Элементы для перемножения
                    {
                        //MessageBox.Show("j" + j.ToString());
                        //MessageBox.Show("i" + i.ToString());
                        //MessageBox.Show("k" + k.ToString());
                        //MessageBox.Show("matrix1[" + i + "," + k+ "]" + matrix1[i, k].ToString());
                        //MessageBox.Show("matrix2[" + k + "," + j + "]" + matrix2[k, j].ToString());
                        resultMatrix[i, j] += matrix1[i, k] * matrix2[k, j];
                        //MessageBox.Show("resultMatrix = " + resultMatrix[i, j].ToString());
                    }
                }
            }
            return resultMatrix;
        }
        private double[,] MultiplyMatricesA(double[,] matrix1, double[,] matrix2)
        {
            int rows1 = matrix1.GetLength(0);
            int cols1 = matrix1.GetLength(1);
            int rows2 = matrix2.GetLength(0);
            int cols2 = matrix2.GetLength(1);
            MessageBox.Show("rows1" + rows2.ToString());
            MessageBox.Show("cols2" + cols2.ToString());
            //if (cols1 != rows2)
            //{
            //    throw new ArgumentException("Количество столбцов первой матрицы должно быть равно количеству строк второй матрицы.");
            //}

            double[,] resultMatrix = new double[rows1, cols2];

            for (int j = 0; j < cols2; j++) // Строки результирующей матрицы
            {
                for (int i = 0; i < rows1; i++)  // Столбцы результирующей матрицы
                {
                    for (int k = 0; k < rows1; k++) // Элементы для перемножения
                    {
                        //MessageBox.Show("j" + j.ToString());
                        //MessageBox.Show("i" + i.ToString());
                        //MessageBox.Show("k" + k.ToString());
                        MessageBox.Show("matrix1[" + i + "," + k+ "]" + matrix1[i, k].ToString());
                        MessageBox.Show("matrix2[" + k + "," + j + "]" + matrix2[k, j].ToString());
                        resultMatrix[i, j] += matrix1[j, k] * matrix2[k, j];
                        MessageBox.Show("resultMatrix = " + resultMatrix[i, j].ToString());
                    }
                }
            }

            return resultMatrix;

        }
        //получение матрицы совместных вероятностей p(ai,bj) 1 способ
        private double[,] CalculateJointProbabilityMatrix(double[,] priorProbabilities, double[,] conditionalProbabilities)
        {
            //int rows = conditionalProbabilities.GetLength(0);
            //int cols = conditionalProbabilities.GetLength(1);
            //int priorCols = priorProbabilities.GetLength(1);
            ////MessageBox.Show("pai/bj =" + rows.ToString());

            ////Проверка на совместимость размеров
            //if (rows != priorCols)
            //{
            //    throw new ArgumentException("Количество столбцов матрицы условных вероятностей должно быть равно количеству строк вектора априорных вероятностей.");
            //}

            //double[,] jointProbabilities = new double[rows, cols];

            //for (int i = 0; i < rows; i++) // строки
            //{
            //    for (int j = 0; j < cols; j++) // столбцы
            //    {
            //        MessageBox.Show("matrix1[" + i + "," + j + "]" + conditionalProbabilities[i, j].ToString());
            //        MessageBox.Show("matrix2[" + 0 + "," + i + "]" + priorProbabilities[0, i].ToString());
            //        // поэлементное перемножение с учетом формулы
            //        jointProbabilities[i, j] = priorProbabilities[0, i] * conditionalProbabilities[i, j];
            //        MessageBox.Show("resultMatrix = " + jointProbabilities[i, j].ToString());
            //    }
            //}
            //return jointProbabilities;
            int rows = conditionalProbabilities.GetLength(0);
            int cols = conditionalProbabilities.GetLength(1);
            int priorCols = priorProbabilities.GetLength(1);
            int priorRows = priorProbabilities.GetLength(0);
            //MessageBox.Show("pai/bj =" + rows.ToString());

            //Проверка на совместимость размеров
            //if (rows != priorCols)
            //{
            //    throw new ArgumentException("Количество столбцов матрицы условных вероятностей должно быть равно количеству строк вектора априорных вероятностей.");
            //}

            double[,] jointProbabilities = new double[rows, cols];

            if (cols==priorCols)
            {
                for (int i = 0; i < rows; i++) // строки
                {
                    for (int j = 0; j < cols; j++)  // столбцы
                    {
                        MessageBox.Show("matrix1[" + i + "," + j + "]" + conditionalProbabilities[i, j].ToString());
                        MessageBox.Show("matrix2[" + 0 + "," + j + "]" + priorProbabilities[0, j].ToString());
                        // поэлементное перемножение с учетом формулы
                        jointProbabilities[i, j] = priorProbabilities[0, j] * conditionalProbabilities[i, j];
                        MessageBox.Show("resultMatrix = " + jointProbabilities[i, j].ToString());
                    }
                }
            }
            else
            {
                for (int i = 0; i < rows; i++) // строки
                {
                    for (int j = 0; j < cols; j++) // столбцы
                    {
                        MessageBox.Show("matrix1[" + i + "," + j + "]" + conditionalProbabilities[i, j].ToString());
                        MessageBox.Show("matrix2[" + 0 + "," + i + "]" + priorProbabilities[0, i].ToString());
                        // поэлементное перемножение с учетом формулы
                        jointProbabilities[i, j] = priorProbabilities[0, i] * conditionalProbabilities[i, j];
                        MessageBox.Show("resultMatrix = " + jointProbabilities[i, j].ToString());
                    }
                }
            }
            return jointProbabilities;

        }


        private double Calculate_H(DataGridView dataGridView, double[,] matrix)//метод для расчета энтропии
        {
            int rows = matrix.GetLength(0);
            int cols = matrix.GetLength(1);
            double h = 0;
            for (int i = 0; i < cols; i++)
            {
                for (int j = 0; j < rows; j++)
                {
                    if (!string.IsNullOrEmpty(dataGridView.Rows[j].Cells[i].Value?.ToString()))
                    {
                        matrix[j, i] = Convert.ToDouble(dataGridView.Rows[j].Cells[i].Value);
                        double h_i = Convert.ToDouble(dataGridView.Rows[j].Cells[i].Value);
                        h_i = Math.Round(h_i * Math.Log(h_i, 2), 2);
                        h += h_i;
                    }
                    else
                    {
                        matrix[i, j] = 0;
                    }
                }
            }
            return h;
        }

        private double CalculateConditionalEntropyHBA(double[,] priorProbabilities, double[,] conditionalProbabilities)//получение H(B/A) 
        {

            int rows = conditionalProbabilities.GetLength(0);
            int cols = conditionalProbabilities.GetLength(1);
            int priorCols = priorProbabilities.GetLength(1);
            int priorRows = priorProbabilities.GetLength(0);
            //MessageBox.Show("pai/bj =" + rows.ToString());
            double h = 0;
            //Проверка на совместимость размеров
            if (rows != priorCols)
            {
                throw new ArgumentException("Количество столбцов матрицы условных вероятностей должно быть равно количеству строк вектора априорных вероятностей.");
            }

            for (int i = 0; i < rows; i++) 
            {
                for (int j = 0; j < cols; j++) 
                {
                    h += Math.Round(priorProbabilities[0, i] * conditionalProbabilities[i, j] * Math.Log(conditionalProbabilities[i, j], 2), 2);
                }
            }
            return h;
        }
        private double CalculateConditionalEntropyHAB(double[,] priorProbabilities, double[,] conditionalProbabilities)//получение H(B/A) 
        {

            int rows = conditionalProbabilities.GetLength(0);
            int cols = conditionalProbabilities.GetLength(1);
            int priorCols = priorProbabilities.GetLength(1);
            int priorRows = priorProbabilities.GetLength(0);
            //MessageBox.Show("pai/bj =" + rows.ToString());
            double h = 0;
            //Проверка на совместимость размеров
            //if (rows != priorCols)
            //{
            //    throw new ArgumentException("Количество столбцов матрицы условных вероятностей должно быть равно количеству строк вектора априорных вероятностей.");
            //}

            for (int i = 0; i < rows; i++)
            {
                for (int j = 0; j < cols; j++)
                {
                    //MessageBox.Show("matrix1[" + i + "," + j + "]" + conditionalProbabilities[i, j].ToString());
                    //MessageBox.Show("matrix2[" + 0 + "," + j + "]" + priorProbabilities[0, j].ToString());
                    h += Math.Round(priorProbabilities[0, j] * conditionalProbabilities[i, j] * Math.Log(conditionalProbabilities[i, j], 2), 2);
                    //MessageBox.Show("H(A/B) = " + h.ToString());
                }
            }
            return h;
        }
        private double[,] CalculateConditionalProbabilityMatrix(double[,] priorProbabilities, double[,] conditionalProbabilities)//получение матрицы совместных вероятностей p(ai,bj) 
        {
            int rows = conditionalProbabilities.GetLength(0);//p(aibi)
            int cols = conditionalProbabilities.GetLength(1);

            double[,] jointProbabilities = new double[rows, cols];

            for (int j = 0; j < cols; j++) // строки
            {
                for (int i = 0; i < rows; i++)  // столбцы
                {
                    jointProbabilities[i, j] = Math.Round((conditionalProbabilities[i, j] / priorProbabilities[0, j]), 2);
                }
            }

            return jointProbabilities;
        }
        

        private void button3_Click(object sender, EventArgs e)
        {
            label7.Text = "Результат";
            listBox1.Items.Clear();
            int n = dataGridView1.Rows.Count;
            //MessageBox.Show("n0" + dataGridView1.Rows.Count.ToString());
            int m = dataGridView1.Columns.Count;
            double[,] A;
            double[,] B;
            double[,] resultMatrix;
            double[,] pij_matrix;
            double[,] pidivj_matrix;
            double h_a;
            double h_b;
            double h_bdiva;
            double h_adivb;
            double h_ab;
            double i_ab;
            double[,] matrix1 = ReadMatrixFromDataGrid(dataGridView1, n, m);

            if (comboBox1.Text == "1")//1 способ
            {
                int n2 = dataGridView2.Rows.Count;
                int m2 = dataGridView2.Columns.Count;

                double[,] matrix2 = ReadMatrixFromDataGrid(dataGridView2, 1, n);
                
                //MessageBox.Show("res");
                B = MultiplyMatricesB(matrix2, matrix1);//находим ансамбль В
                DisplayMatrixInListBox(B, listBox1, "B = ");

                h_a = - Calculate_H(dataGridView2, matrix2);// рассчитываем энтропию ансамбля А
                listBox1.Items.Add("H(A) = " + h_a);

                FillDataGridView(dataGridView3,B);// рассчитываем энтропию ансамбля B
                h_b = -Calculate_H(dataGridView3, B);
                listBox1.Items.Add("H(B) = " + h_b);
                
                pij_matrix = CalculateJointProbabilityMatrix(matrix2, matrix1);//p(ai,bj)
                listBox1.Items.Add("p(ai,bj) = ");
                DisplayMatrixInListBox(pij_matrix, listBox1, "");

                h_bdiva = - CalculateConditionalEntropyHBA(matrix2, matrix1);// рассчитываем H(B/A)
                listBox1.Items.Add("H(B/A) = " + h_bdiva);
                double[,] matrix3 = ReadMatrixFromDataGrid(dataGridView3, 1, n);
                
                pidivj_matrix = CalculateConditionalProbabilityMatrix(B, pij_matrix);//p(ai/bj)
                listBox1.Items.Add("p(ai/bj) = ");
                DisplayMatrixInListBox(pidivj_matrix, listBox1, "");

                h_adivb = -CalculateConditionalEntropyHAB(B, pidivj_matrix);// рассчитываем H(B/A)
                listBox1.Items.Add("H(A/B) = " + h_adivb);

                h_ab = h_a + h_bdiva;
                listBox1.Items.Add("H(AB) = " + h_ab);//H(AB)

                i_ab = h_a - h_adivb;//I(AB)
                listBox1.Items.Add("I(AB) = " + i_ab);

                string resultText = "Результат умножения матриц:\n";
                for (int i = 0; i < n; i++)
                {
                    for (int j = 0; j < m; j++)
                    {
                        resultText += pidivj_matrix[i, j].ToString() + " ";
                    }
                    resultText += "\n";
                }
            }
            else if (comboBox1.Text == "2")
            {
                int n2 = dataGridView2.Rows.Count;
                int m2 = dataGridView2.Columns.Count;

                double[,] matrix2 = ReadMatrixFromDataGrid(dataGridView2, 1, m);

                //MessageBox.Show("res");
                //A = MultiplyMatricesA(matrix2, matrix1);//находим ансамбль A
                //DisplayMatrixInListBox(A, listBox1, "A = ");

                h_b = -Calculate_H(dataGridView2, matrix2);// рассчитываем энтропию ансамбля А
                listBox1.Items.Add("H(B) = " + h_b);

                //FillDataGridView(dataGridView3, A);// рассчитываем энтропию ансамбля B
                //h_a = -Calculate_H(dataGridView3, A);
                //listBox1.Items.Add("H(A) = " + h_a);

                pij_matrix = CalculateJointProbabilityMatrix(matrix2, matrix1);//p(ai,bj)
                listBox1.Items.Add("p(ai,bj) = ");
                DisplayMatrixInListBox(pij_matrix, listBox1, "");

                //h_bdiva = -CalculateConditionalEntropyHBA(matrix2, matrix1);// рассчитываем H(B/A)
                //listBox1.Items.Add("H(A/B) = " + h_bdiva);
                

                //pidivj_matrix = CalculateConditionalProbabilityMatrix(A, pij_matrix);//p(ai/bj)
                //listBox1.Items.Add("p(ai/bj) = ");
                //DisplayMatrixInListBox(pidivj_matrix, listBox1, "");

                //h_adivb = -CalculateConditionalEntropyHAB(A, pidivj_matrix);// рассчитываем H(B/A)
                //listBox1.Items.Add("H(A/B) = " + h_adivb);

                //h_ab = h_a + h_bdiva;
                //listBox1.Items.Add("H(AB) = " + h_ab);//H(AB)

                //i_ab = h_a - h_adivb;//I(AB)
                //listBox1.Items.Add("I(AB) = " + i_ab);

                //string resultText = "Результат умножения матриц:\n";
                //for (int i = 0; i < n; i++)
                //{
                //    for (int j = 0; j < m; j++)
                //    {
                //        resultText += pidivj_matrix[i, j].ToString() + " ";
                //    }
                //    resultText += "\n";
                //}

            }
            else
            {
                //int n2 = dataGridView2.Rows.Count;
                //int m2 = dataGridView2.Columns.Count;
                //MessageBox.Show("m2");
                //double[,] matrix2 = ReadMatrixFromDataGrid(dataGridView2, 1, m);
                //MessageBox.Show("res");
                //// Умножение матриц
                //resultMatrix = MultiplyMatrices(matrix1, matrix2, n, m);
                
                //string resultText = "Результат умножения матриц:\n";
                //for (int i = 0; i < n; i++)
                //{
                //    for (int j = 0; j < m; j++)
                //    {
                //        resultText += resultMatrix[i, j].ToString() + " ";
                //    }
                //    resultText += "\n";
                //}
                //MessageBox.Show(resultText);
            }
            

           

        }
        public static void DisplayMatrixInListBox(double[,] matrix, ListBox listBox, string title)//вывод матрицы 
        {
            int rows = matrix.GetLength(0);
            int cols = matrix.GetLength(1);
            for (int i = 0; i < rows; i++)
            {
                string rowString = "";
                for (int j = 0; j < cols; j++)
                {
                    rowString += matrix[i, j].ToString("F2") + "\t"; 
                }
                listBox.Items.Add(title + rowString.TrimEnd('\t')); 
            }
        }
        public static void FillDataGridView(DataGridView dataGridView, double[,] matrix)//заполнение таблицы В для расчета энтропии
        {
            dataGridView.Rows.Clear();
            int rows = matrix.GetLength(0);
            int cols = matrix.GetLength(1);
            dataGridView.ColumnCount = cols; 
            for (int i = 0; i < rows; i++)
            {
                dataGridView.Rows.Add(); 
                for (int j = 0; j < cols; j++)
                {
                    dataGridView.Rows[i].Cells[j].Value = matrix[i, j];
                }
            }
        }

        private void label4_Click(object sender, EventArgs e)
        {

        }

        private void label8_Click(object sender, EventArgs e)
        {

        }

        private void label7_Click(object sender, EventArgs e)
        {

        }

        private void textBox1_TextChanged(object sender, EventArgs e)
        {

        }

        private void textBox2_TextChanged(object sender, EventArgs e)
        {

        }
    }
}
